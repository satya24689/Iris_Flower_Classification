# -*- coding: utf-8 -*-
"""Iris_flower_system_using_LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KDUyq368F93R5G2QyMHjey-SMmtsbQQL

#Iris_flower_system_using_LogisticRegression

This Repository contains a project on classification of Iris Flower Dataset presented by team Code Breakers. Basicaly Iris flower has 3 families namely - setosa, virginica, versicolor. At the end of the project we will be able to recognise the family of the flower by just entering its sepal and petal length and width.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from sklearn.datasets import load_iris

iris=load_iris()
type(iris)

print (iris.data)

print(iris.feature_names)

print(iris.target)

print(iris.target_names)

print (type(iris.data))

print(type(iris.target))

print(iris.data.shape)

print (iris.target.shape)

X=iris.data
y=iris.target

print(X.shape)
print(y.shape)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=1)

print(knn)

knn.fit(X,y)

X_new=[[3,5,4,2],[5,4,3,2]]
knn.predict(X_new)

knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(X,y)
knn.predict(X_new)

from sklearn.linear_model import LogisticRegression

logreg=LogisticRegression()
logreg.fit(X,y)
logreg.predict(X_new)

logreg.predict(X)

y_pred=logreg.predict(X)
len(y_pred)

from sklearn import metrics
print(metrics.accuracy_score(y,y_pred))

y_predknn=knn.predict(X)
print(metrics.accuracy_score(y,y_predknn))

knn=KNeighborsClassifier(n_neighbors=1)
knn.fit(X,y)
knn.predict(X_new)

y_predknn1=knn.predict(X)
print(metrics.accuracy_score(y,y_predknn1))

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.4,random_state=1)

print(X_train.shape)
print(y_test.shape)

print(y_train.shape)
print(y_test.shape)

y_pred=logreg.predict(X_test)
print(metrics.accuracy_score(y_test,y_pred))

knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train,y_train)
y_pred=knn.predict(X_test)
print(metrics.accuracy_score(y_test,y_pred))

k_range=range(1,25)
scores=[]
for k in k_range:
    knn=KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train,y_train)
    y_pred=knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test,y_pred))

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.plot(k_range,scores)
plt.grid()
plt.xlabel("value of k level in knn")
plt.ylabel("Testing Accuracy")

knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(X,y)
knn.predict([[3,5,4,2],[5.1, 3.5, 1.4, 0.2]])